{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","tittle","images","downsized_medium","GifGridItem","title","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAEvCN,EAAc,MAKlB,SACI,uBACCO,KAAO,OACPC,MAAST,EACTU,SArBiB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAWH,GAF7C,+DAGDI,MAAOF,GAHN,cAGdG,EAHc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAGD,EAAIC,GACPC,OAAQF,EAAIE,OACZV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXtB,kBAcbM,GAda,4CAAH,sDCCRO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIK,EAAgB,EAAhBA,MAAOd,EAAS,EAATA,IAEpC,OADAe,QAAQC,IAAIP,EAAIK,EAAOd,GAEnB,sBAAKiB,UAAY,yCAAjB,UAGI,qBAAKC,IAAOlB,EAAKmB,IAAOL,IACxB,kCAAKA,SCJJM,EAAU,SAAC,GAAgB,IAAftB,EAAc,EAAdA,SAGrB,ECNwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNgB,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAjBAC,qBAAU,WAEN3B,EAAQC,GAEH2B,MAAM,SAAAC,GACHX,QAAQC,IAAIU,GACXH,EAAS,CACNlB,KAAMqB,EACNL,SAAS,SAKtB,CAACvB,IAIGwB,EDnBwBK,CAAa7B,GAAhCa,EAAZ,EAAON,KAAagB,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIJ,UAAW,oCAAf,SAAoDnB,IACnDuB,GAAW,wCAGZ,qBAAKJ,UAAY,8CAAjB,SAGYN,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEf1BmB,EAAe,WAGxB,MAAoC5C,mBAAU,CAAC,QAA/C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KASA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAIQ8C,EAAWtB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAaA,GADNA,YC3B/BgC,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.ed7ed7e2.chunk.js","sourcesContent":["// import React from 'react'\r\nimport React, {useState} from 'react';\r\nimport PropTypes  from 'prop-types';\r\n\r\n// Se le pasa como argumento la categoria\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    // Funcion para que se actualice el valor de entrada\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Se realiza la validacion para que no se ingrese de nuevo el mismo valor\r\n        if (inputValue.trim().length > 2){\r\n\r\n            // Se envia la refencia del set category\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            // Lo que se mandara al inputValue sera un String vacio\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input\r\n             type = \"text\"\r\n             value = {inputValue}\r\n             onChange = {handleInputChange}/>\r\n        </form>\r\n    )\r\n}\r\n// El prop se utiliza para hacer la comunicacion entre los componentes y hacer necesario\r\n// la propiedad de AddCategory\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n export const getGifs = async (category) => {\r\n    // Se obtienen las imagenes\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category)}&api_key=R9fJgdProJ7OljzDqoQa7r2uG2bbkttt&limit=10`;\r\n    const resp = await fetch (url); //Esta sera la varible que va a recibir la respuesta\r\n    const {data} = await resp.json();//La informacion que se recibe sera en formato json\r\n    \r\n    // Extraer informacion que necesitmaos de las imagenes y se retornara un nuevo objeto\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id:img.id,\r\n            tittle: img.tittle,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\n//Se envia la imagen y se pasan como parametros los datos de las imagenes que necesitamos\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    console.log(id, title, url);\r\n    return (\r\n        <div className = \"card animate__animated animate__bounce\">\r\n            {/* Se empieza a crear la imagen para mostrarla */}\r\n            {/* Al source se le pasara el url de la imagen y se obtiene el titulo de la imagen */}\r\n            <img src = {url} alt = {title}/>\r\n            <p> {title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n// Se recibira como argumento la categoria\r\nexport const GifGrid = ({category}) => {\r\n\r\n   \r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className =\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p>loading</p>}\r\n\r\n           \r\n            <div className = \"card-grid animate__animated animate__bounce\">\r\n                    {  \r\n                    // Se le envia la imagen al GifGridItem\r\n                        images.map(img => (\r\n                            <GifGridItem \r\n                            key = {img.id}\r\n                            {...img} // se utiliza el operador spret \r\n                            />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    // Va a tenr como estado inicial un objeto\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // El useEfect se uriliza para que no se carguen de nuevo todos los datos cuando se renderiza la categoria\r\n    useEffect(() => {\r\n        // Se realiza la peticion http\r\n        getGifs(category)\r\n        // Se agregan las imagenes\r\n            .then (imgs => {\r\n                console.log(imgs);\r\n                 setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n             })\r\n\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n    return state;\r\n}\r\n","\r\n//import React from 'react'\r\nimport React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState( ['One']);\r\n\r\n    //Manera de agregar las categorias\r\n    // const handleAdd = () =>{\r\n    //     setCategories([...categories, 'Max']);\r\n    //     // Otra manera de hacer lo anteriror es aÃ±adiendo los valores a una variable llamada ca\r\n    //     setCategories(cats => [...cats, 'Mia']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/* Se le envia una funcion a AddCategory que contiene las categorias */}\r\n            <AddCategory setCategories ={setCategories}/>\r\n            <hr/>\r\n            \r\n            \r\n            {/* Creamos una lista ordenada */}\r\n            <ol>\r\n                {/* El map nos servira para transformar cada uno de los elementos de la categoria\r\n                Y va a regresar las posiciones */}\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                        key = {category}\r\n                        category  = {category}\r\n                        />\r\n                     ))\r\n\r\n                }\r\n\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n//import App from './App';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}